PKGNAME=gcc-runtime
PKGSEC=devel
PKGDEP="glibc"
PKGDES="GNU Compiler Collection (runtime libraries only)"

# The following configuration:
#
# 1.  Enables support for C, C++, Fortran, "LTO", Go, ObjC, and ObjC++;
#     a. Mind here, Object C/C++ support is not enabled, we will provide that
#        in the "llvm" package as they provide a higher quality support for them;
#     b. Fortran is needed for many mathematical packages, as well as some audio/
#        video codecs, remove support for fortran if you know what you are doing;
#     c. "LTO" is not really a language, but it enables GCC to use LTO flags, and
#        thus provide respective optimizations later;
#     d. ObjC and ObjC++ is mainly used by the libobjc2 library and what is
#        dependent on it;
# 2.  Enables shared libraries for linking
#     (this is probably a good choice to reduce binary sizes of any packages that
#     links to GCC runtime libraries);
# 3.  Enables POSIX style threading;
# 4.  Enables linking to system Zlib;
# 5.  Disables libunwind support for exception detection;
# 6.  Enables GNU style C locales (you probably would not want to change this);
# 7.  Disables pre-compiled headers for libstdcxx;
# 8.  Disables libssp linking (not needed);
# 9.  Enables GNU unique object;
# 10. Enables linker build ID;
# 11. Enables LTO support (as mentioned in note 1, section c);
# 12. Enables isl for Graphite loop optimization;
# 13. Enables plugin support;
# 14. Enables libiberty installation
#     (you may disable "--enable-install-libiberty" if you really feel the urge...);
# 15. Enables GNU style linker hash;
# 16. Disables multilib support 
#     (you may remove "--disable-multilib" to enable the support for it, however
#     you will need a copy of GCC with multilib support to build);
#     a. AOSC OS uses subsystems to provide binary support for foreign architectures.
# 17. Enable release level checking;
# 18. Enables support for GNU indirect function
#     (you may disable this by removing "--enable-gnu-indirect-function");
# 19. Use the new "cxx11/new" for libstdc++, available since GCC 5. The old
#     "gcc4-compatbile" ABI was used until Core 5.
# 20. --enable-default-pie enables PIE by default (-fpie or `-fPIE`?).
# 21. --enable-default-ssp enables --fstack-protector-strong by default.

AUTOTOOLS_AFTER="--prefix=/usr \
                 --libdir=/usr/lib --libexecdir=/usr/lib \
                 --mandir=/usr/share/man --infodir=/usr/share/info \
                 --with-bugurl=https://github.com/AOSC-Dev/aosc-os-core \
                 --enable-shared --enable-threads=posix \
                 --with-system-zlib --enable-gnu-indirect-function --enable-__cxa_atexit \
                 --disable-libunwind-exceptions --enable-clocale=gnu \
                 --disable-libstdcxx-pch --disable-libssp \
                 --enable-gnu-unique-object --enable-linker-build-id \
                 --with-isl=/usr \
                 --enable-lto --enable-plugin --enable-install-libiberty \
                 --disable-multilib --disable-werror \
                 --enable-pie \
                 --enable-checking=release \
                 --enable-libstdcxx-dual-abi --with-default-libstdcxx-abi=new \
                 --enable-default-pie --enable-default-ssp --enable-bootstrap"

if [[ "${CROSS:-$ARCH}" != "riscv64" && "${CROSS:-$ARCH}" != "powerpc" ]]; then
    AUTOTOOLS_AFTER+=" --enable-languages=c,c++,fortran,lto,go,objc,obj-c++,d"
else
    # When libFFI is not available on an architecture, Go is not available.
    AUTOTOOLS_AFTER+=" --enable-languages=c,c++,fortran,lto,objc,obj-c++,d"
fi

# MIPS is not yet happy with GNU hashing style.
# Q: Really?
# A: At least our MIPS-II (o32) still couldn't be built with GNU hash style.
#    It is an ABI incompatibility, not an emulation error...
if [[ "${CROSS:-$ARCH}" != mips32 ]]; then
    AUTOTOOLS_AFTER+=" --with-linker-hash-style=gnu"
fi

# ARM and AArch64 specific.
if [[ "${CROSS:-$ARCH}" = arm* ]]; then
    AUTOTOOLS_AFTER+=" --disable-altivec --disable-fixed-point"
fi

# ARMEL had a weird triplet.
if [[ "${CROSS:-$ARCH}" = "armel" ]]; then
    AUTOTOOLS_AFTER+=" --with-arch=armv7-a --with-float=hard \
                       --with-fpu=neon"
fi

# AArch64 specific architectural config.
if [[ "${CROSS:-$ARCH}" = "arm64" ]]; then
    AUTOTOOLS_AFTER+=" --with-arch=armv8-a --enable-fix-cortex-a53-835769 --enable-fix-cortex-a53-843419"
fi

# PowerPC specific.
if [[ "${CROSS:-$ARCH}" = "powerpc" ]]; then
    AUTOTOOLS_AFTER+=" --with-tune=G4 \
                       --with-long-double-128 --enable-secureplt"
fi

# PowerPC64 specific.
if [[ "${CROSS:-$ARCH}" = "ppc64" ]]; then
    AUTOTOOLS_AFTER+=" --with-cpu=G5 --with-tune=G5 \
                       --with-long-double-128 --enable-secureplt"
fi

# MIPS64EL specific.
if [[ "${CROSS:-$ARCH}" = "mips64el" ]]; then
    AUTOTOOLS_AFTER+=" --with-abi=64 --with-arch=mips64r2 \
                       --with-tune=loongson3a"
fi

# RISC-V specific
if [[ "${CROSS:-$ARCH}" = riscv* ]]; then
    AUTOTOOLS_AFTER+=" --without-libffi"
fi

# FIXME: random segmentation faults during build.
if [[ "${CROSS:-$ARCH}" != "i586" ]]; then
    ABMK="profiledbootstrap"
fi
AB_FLAGS_SPECS=0
AB_FLAGS_O3=1
NOLTO=1

RECONF=0

PKGBREAK="gcc<=5.2.0-1"
ABRPMAUTOPROVONLY=yes
